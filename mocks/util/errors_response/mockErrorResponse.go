// Code generated by MockGen. DO NOT EDIT.
// Source: test/util/errors_response (interfaces: RespError)

// Package errors_response is a generated GoMock package.
package errors_response

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRespError is a mock of RespError interface.
type MockRespError struct {
	ctrl     *gomock.Controller
	recorder *MockRespErrorMockRecorder
}

// MockRespErrorMockRecorder is the mock recorder for MockRespError.
type MockRespErrorMockRecorder struct {
	mock *MockRespError
}

// NewMockRespError creates a new mock instance.
func NewMockRespError(ctrl *gomock.Controller) *MockRespError {
	mock := &MockRespError{ctrl: ctrl}
	mock.recorder = &MockRespErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRespError) EXPECT() *MockRespErrorMockRecorder {
	return m.recorder
}

// GetError mocks base method.
func (m *MockRespError) GetError() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetError")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetError indicates an expected call of GetError.
func (mr *MockRespErrorMockRecorder) GetError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockRespError)(nil).GetError))
}

// GetMessage mocks base method.
func (m *MockRespError) GetMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockRespErrorMockRecorder) GetMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockRespError)(nil).GetMessage))
}

// GetStatus mocks base method.
func (m *MockRespError) GetStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockRespErrorMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockRespError)(nil).GetStatus))
}
